              DOCKER ALL CONCEPTS
				  
$ WHY WE ARE  USING THE DOCKER MEANS TO REDUCE THE RESOURCE OF UTILIZATION

$ SLOWGUN -->BUILD-->SHIP -->RUN

$BUILD THE IMAGE --> PUSH TO DOCKER CONTAINER -->PULL-->RUN CONTAINER
    

                    INSTALL DOCKER ON EC2 INSTANCE

  IN AMEZON INSTANCE              IN UBUNTU INSTANCE                
  
   
  sudo -i                           sudo -i
						
 yum update -y                   sudo apt-get update -y

 docker --version                  docker --version

 yum install docker -y	         sudo apt-get install docker.io	

 docker --version                  docker --version

 docker info                      sudo docker info
 
 service docker start               DUE TO WE ARE NOT USING THE SUDO  
 
docker image	              sudo usermod -a -G docker ec2-user

                                         or 
                              sudo usermod -a -G docker ubuntu
then open the new terminal connect with ssh -i command
                                        


                      docker --version
	                       (or)
                       docker -v	

                      docker info

                       docker images					  

                      docker pull ubuntu

                      docker images	

REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              f643c72bc252        6 weeks ago         72.9MB

                           	
          will saw this 

 then we get perticular version


                     docker pull ubuntu:18.04 
					  
		     docker pull ubuntu:20.04
					  
			 docker images
				
then we check the containers in this machine	


                       docker ps
					   
container id          image       command             created      status 

    "    			    "            "                   "           " 

now we are check the running container as well as stoped containers

                       docker ps -a 


 image search -->  docker search clock	

                   docker pull jpetazzo/clock
				   
			 docker pull centos

              docker images	
                     
now we are run the container

       docker run -it ubuntu bash
      
 ubuntu-->means image name	
				   
  exit from the container ----->   ctrl + pq
  
  
  container run or not   ----->    docker ps 
  
  $ give to name of the container

                 docker run -it --name myubuntu ubuntu bash 

$ here ""myubuntu"" is container name ""ubuntu"" is image name

               docker ps -a	
			   
     	$   intensionally we stop the container
	
            then go to a perticular container then type    "exit" 
    
            then it will stop automatically 
		
		
        $  How to  login  a running container 

           docker exec -it <container id > /bin /bash
   
               ls -ltr

            apt-get update

          apt install figlet   (or)  yum install figlet 
		 
		      figlet goverdhan 

		 
Now we need to convert container to image		 

         docker commit -m "this is myfiglet image"containerid figlet_ubuntu	
 
                      docker images
In this is figlet_ubuntu image has figlet software again this image has to be run 

docker run -it --name figletubuntusoft figlet_ubuntu

now your in container then check it :figlet vardhan 

Removing containers 

                     docker rm container id
					 
					 docker rm -f container id
					 
Before removing the container we need to stop the container first	
				  
					docker ps -a 
					
					docker search hello-world

					docker pull hello-world

                    docker images

i want to run hello-world as a  container	

                    docker run -it --name hello hello-world bash	
 
hello-world is a image name

                              docker ps 

   it is not there	
         
                    docker ps -a	
					
					docker images

                 docker run -d --name clock jpetazzo/clock

it is in run in back ground	

                  docker ps -a	

                  docker logs <containerid>

and the other type	

                docker run -it --name clock1 jpetazzo/clock 	

             it is running in UTC type	

I want to see live logs  

                  tail -f logfile	

              docker logs --follow c33ee9265222 --> 10days logs print
                                  <containerid>
			  
			  docker logs --tail -f  c33ee9265222 --> it prints last 10 previous lines
                                                 <containerid>
  
  
                docker ps -a  , docker ps -aq  , docker ps -l

  docker rm -f $(docker ps -qa)  -->for remove all stoped containers at a time

  docker rmi "imageid"           -->to delete docker image

  remove all images at a time    --> docker image prune -a
  
  then yes                       -->it will remove all images
		   

how to run exited container     -->first go to that perticular container 
                                     docker exec -it 'containerid'  
                        then   ---> docker start 'containerid'
   if you want to stop	       ---> docker stop 'containerid'	
										

						****DOCKER HUB***
						
  Docker hub is using to storing the docker images & publicly  available


only 5 images can  store in private repocitory 

    we should push docker images in to docker hub 

                    docker images 	

Repocitory         TAG            IMAGESID            CREATED         SIZE 
tomcat             latest          2386d              4days ago       506mb
figlet_ubuntu      latest          1908fa             6days ago       92.4mb 

                 docker push tomcat 
				 			        ENTER
                 
WILL SAW THE : required access to the resource is denied 	

                 docker login 		

              username: 9177587696	
              password: vardhan	

               LOGIN SUCCED 	

again we are doing 	same job	
              
			  docker push figlet_ubuntu	

WILL SAW THE : AGAIN THE ACCESS DENIED 

THEN WE ADD THE USER NAME BEFORE THE IMAGE	

              docker push 917758/figlet_ubuntu	

             before that we adding the tag	

            docker tag figlet_ubuntu 917758/figlet_ubuntu:v1

              docker images	

            docker push 9177/figlet_ubuntu	

it will go to the docker
                                  mkdir test-app
                                   cd test-app
	
	                         vi Dockerfile

FROM openjdk:7 
ADD Helloworld.java .
RUN javac Helloworld.java 
CMD ["java","Helloworld"]	

 
save it 

                               vi Helloworld.java


public class Helloworld {
  public static void main(String[] args) {
    System.out.println("Helloworld!");
  }
}

 
                        save it
                               
                             docker build -t 9177587696/myjavaapp . 

                               docker images
                           
                              docker run -it --name myapp 9177587696/myjavaapp

                          it will printe Hello vardhan 
                         
                                     docker ps 
                        
                         it is a console level application
                        
                                   docker ps -a

                                    docker log <containerid>
					
					mkdir test-app-alpine   
                              cp -R test-app/ test-app-alpine
	
						or 

                                       vi Dockerfile

FROM openjdk:7-alpine
ADD Helloworld.java .
RUN javac Helloworld.java 
CMD ["java","Helloworld"]	

                                         
                                             vi Helloworld.java


public class Helloworld {
  public static void main(String[] args) {
    System.out.println("Hello world!");
  }
}

                                   docker build -t 9177587696/myjavaapp-alpine .


                              docker run -it --name myapp 9177587696/myjavaapp-alpine

                                       docker images 

                                     size of mb will reduce

                    what is the difference betweeen  RUN   CMD   ENTRYPOINT

In a nutshell
RUN :  executes command(s) in a new layer and creates a new image. E.g., it is often used for installing software packages.
CMD  :   sets default command and/or parameters, which can be overwritten from command line when docker container runs.
ENTRYPOINT :  configures a container that will run as an executable.

                               docker file write with shell & execute 
                                shell : cmd ,run 
                                excute :entrypoint

                             shell : instruction <command>
                             excute: instaruction["excute" "parameter1","parametre2"] 
    impnote : this is shell form
                               
                              mkdir cmd-entry
                              cd cmd-entry


                                         vi Dockerfile

                                        FROM ubuntu
                                        RUN apt-get update -y
                                        ENV name madhu sudhan
                                        ENTRYPOINT echo "Hello, $name"
                   

                         save it 
                              
                                     docker build -t test .
                                    
                                    docker images | grep test
   
                                 docker run -it --name mytest test

                               it will excute  "Hello, madhu sudhan"
   
     impnote : this is exec form  

 open the docker file again
                                   vi Dockerfile
                                  
                                   FROM ubuntu
                                   RUN apt-get update -y
                                   ENV name madhu sudhan
                                   ENTRYPOINT ["/bin/echo","Hello, $name"]
                                   

                                      docker build -t test1 .

                                     docker run -it --name mytest1 test1

                                     it will excute  Hello,$name

                                 it cannot be overwrite in this way

that's way we are used to modify the  ENTRYPOINT

         open the docker file again
                                   vi Dockerfile
                                  
                                   FROM ubuntu
                                   RUN apt-get update -y
                                   ENV name madhu sudhan
                                   ENTRYPOINT ["/bin/bash","-c", "echo Hello, $name"]

                                      docker build -t test2 .

                                     docker run -it --name mytest2 test2

                                      it will excute  Hello, madhu sudhan

CMD  :   sets default command and/or parameters, which can be overwritten from command line when docker container runs.

how it will over write

example:                              vi Dockerfile

                                   FROM ubuntu
                                   RUN apt-get update -y
                                   CMD echo "Hello world"

                                   docker build -t test3 .

                                   docker run -it --name mytest3 test3

                 it will excute  Hello world

i will over write this value : 

                                    docker run -it --name mytest3.1 test3 ls 
                                     
                                    docker run -it --name mytest3.2 test3 /bin/bash

                                    docker run -it --name mytest3.3 test3 uptime
combination fo cmd entry point :

                                     vi Dockerfile
                                  
                                   FROM ubuntu
                                   RUN apt-get update -y
                                   ENTRYPOINT ["/bin/echo", "Hello"]
                                   CMD ["world"]

---->    ENTRYPOINT   it cannot be overwrite
----->     CMD     it can be over write  

                                   docker build -t test4 .

                                  docker run -it --name mytest4 test4

                     it will excute  Hello world

                                   docker run -it --name mytest4.1 test4 vardhan

                   it will excute  Hello vardhan  (it will over write insted of Hello world)

                            docker run -it --name mytest4.2 test4 govi

                   it will excute  Hello govi  (it will over write insted of Hello vardhan)


                                 

                              Deploy war file using dockerfile instructions

--> spin up the  linux machine 
--> install java
---> install apache tomcat
in our method but in  docker ---> then launch the instance
                     sudo -i
                   apt-get update -y
                   apt-get install docker.io
                    docker -v

                  git clone https://github.com/govi321/docker_practice.git

                  ls -ltr  (will saw docker_practice file )

                  cd  docker_practice
                   ls -ltr  (will saw war_deployment)
                    cd   war_deployment
                            ls -ltr
                        
                         vi Dockerfile
save it .
                         docker build -t web:v1 .
 
                        docker images | grep web
 
                       by default it will run 8080 port number

                     docker run -d -p 8080 --name myweb web:v1

                      container will run imdeatly
                           
                             docker ps
    randomly it will take 32768 >8080 port will generate.

             go to security group --> launchwizard --> edit --> allocate 32768 and anywhere 

               for  future purpose port  8181  anywhere
                                         8282  anywhere

                    THEN take DNS OF OUR INSTANCE
                    ec2-13-235-104-102.ap south-1-amazon.com:32768

                          tomcat will run then 32768/spring3/

                            it shows spring3 MVC project .
 
                    docker run -d -p 8181:8080 --name myweb1 web:v1

                       this is called port forwarding

     
                                docker ps 

                           8181--> 8080 

                 cpoy the DNS : 8181/spring3/

             it shows    spring3 MVC Project

                        docker images | grep -i web 


                     web                     497mb

NOTE : Manager requirement is just reduce the mb size .

                               vi Dockerfile

                              FROM tomcat : 8.5-alpine 
                          take the tomact alpine from google 
     
                               docker build -t web_alpine:v2 .

then it will download from docker hub

                           docker images | grep -i web_alpine


                                 vi Dockerfile

                                 FROM tomcat : jdk8-openjdk-slim

                              docker pull tomcat:jdk8-openjdk-slim

now going to build 

                                 docker build -t web_slim:v3 .

                                 docker images | grep -i web
                           web-alpine        111 mb
                           web-slim          306mb 

                     docker run -d -p 8282:8080 --name webapp web_alpine:v2
            
                          container will run 

                  copy the instance DNS :8282/spring3/
        
                       docker exec -it container name(alpine container) bash

                           pwd
                      user/local/tomcat/webapps

                     

                                 DOCKER JENKINS INTEGRATION

 RUN the instance --> paste in git bash

                        sudo -i

                      apt-get update

                    apt-get install docker.io

           then install  ---->  java , maven , jenkins ,

then open the git hub, docker hub ,  jenkins

          then go to jenkins dash board --> manage jenkins ---manage plugins --CloudBees Docker Build and Publish

    --> install with out restart --> 

              create a new freestyle_job --> sourece code git -->https://github.com/govi321/web_login_automation.git

 ---> BUILD --> Docker BUILD and publish  --> PUBLISH

   Repository name       9177587696/Docker_image1
    tag      
 Registry credential             ADD
                        USER NAME 9177587696
                        PASSWD    vardhan
                         ID        docker_hub

                                           add

                                        advance

                     FORCE TAG REPLACEMENT   SELECT IT
                     APPLY   & SAVE

THEN BUILD NOW 

 If incase fail then go to git bash 

                 sudo usermod -a -G docker jenkins

                sudo  service jenkins restart

                  sudo reboot
then refresh the jenkins --> build the job agin --> then it wents to the Docker hub  



                DOCKER DEPOLY NODEJS DOCKER FILE


ajenda is to creatae web page like that api model
 It's used for traditional web sites and back-end API services

Take the one instance

                        install java ,maven,
                apt-get install docker.io 

                    git clone  https://github.com/govi321/docker_practice.git
                            ls-ltr
                         Login_Docker_alphin0e
                     cd Login_Docker_al phine
                                   ls -ltr
                                      css
                                Dockerfile
                             index.html
                           vi  Dockerfile
  
                          save it .
                     docker build -t node_app_alpine:v1 . 

              docker images | grep node_app_alpine

             size    4.21mb 

                  docker pull ubuntu 

              docker images 

             commapare  the diffrence 
                  docker run -d -p 1234:8080 --name nodeapp node_app_alpine:v1

                           docker ps 
edit inbound rules add--1234--anywhere

                take the DNS or public ip :1234
                   
                                       user name
                          Site Random          
                                       passwd
                                       Login                    will appear 

we can create multiple imags at a time 

    docker build -t node_app:v1 -t vardhan/node_app:v1 -t localhost:5000/node_app:v1 .
  
   <this my local>                  <this is my staging>    <this is my production>

like that
note :   quary : how to ignor the file

answer : .dockerignore

example : .git

one more example: if taking ubuntu as example:


                                            ls -ltr
                                          cd Login_Docker
                                             ls -ltr

                                               css
                                            Dockerfile
                                            index.html
 will appear 

                                              vi Dockerfile

save it here from ubuntu
                              docker buid -t node_ubuntu:v1 .

                              docker images | grep node
                                 just compare the size of mbs


 
                                       DOCKER PRIVATE REGISTRY
 

ajenda : after the createing the images 

then we need to push docker hub ,the docker hub private registry has only 5 images freely ,after 5 images its going to be public  

thas way we createing our own private registry

INSTED OF docker hub repositry we are create  a private registry (or ) Registry:2

docker private registry is used to store for docker images

privte registry create  by registry2  . this will be run on port number 5000


then 
            docker pull openjdk:11-jdk-slim
            docker pull openjdk:13-jdk-alpine
           docker pull openjdk:11.0.6-jdk-stretch
                    docker pull ubuntu          
        
                  docker images

we have to compare the size pf the images

then 
                   How to create private registry (or) registry :2


      docker run -d -p 5000:5000 --restart=always --name registry registry:2

note : 5000 is the uniq port for private registry


 Here: restart=always means "  at that time your server or instance or machine is running 
                     
            excluding your stoping the containers it will run (or ) start automatically

                          docker ps
your container will be run then
                                 docker images


NOTE  :        push some images to your private registry


                docker image tag ubuntu localhost:5000/my-ubuntu

                 docker images | grep localhost

we will saw the image

                  docker push localhost:5000/my-ubuntu

          how to check the images in private registry

         curl -X GET http://localhost:5000/v2/_catalog 

       If you want gt the all tags form a particular image.
 
         curl -X GET http://localhost:5000/v2/my-ubuntu/tags/list


if you want delete a tag first we need to get a catalog and tags and then use bellow command.


curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X DELETE http://127.0.0.1:5000/v2/my-ubuntu/manifests/


if you want to delete the images we must set the environment variable called REGISTRY_STORAGE_DELETE_ENABLED=true

docker run -d -p 5000:5000 -e REGISTRY_STORAGE_DELETE_ENABLED=true --restart=always --name registry registry:2

then we have to remove image in my local system 

              docker rmi -f <image name>
            docker images | grep localhost

it is in private regisrty but we can't seee in local system .

 then again downlod to my local system

    docker pull localhost:5000/figlet_ubuntu_exexo:v1

    docker images | grep localhost 
 docker run --rm -d -p 5000:5000 --restart=always --name registry registry:2

  above rm means incase your stop the container it will deleted automatically .



                                    DOCKER VOLUMES

ajenda :it means example if the running conatiner is deleted intentianally or not intentianally

in the container data is available to in my host mchine that's way we are using volumes:
   it represent -v the letter.
example :

       docker run -it --rm -v /mydata:/mydata_c ubuntu
                               <data>  <datain>  imagename
                       host machine   container

        docker run --rm -d -p 8181:8080 -v / out/side/path:/inside/container --name mycontainer imaagename

             docker run --rm -it -v /mydata:/mydata_c ubuntu

before "mydata" / mentiond here the data is   disappeared for next 
step for docker volume inspect mydata 


           docker run --rm -it -v mydata1:/mydata_c ubuntu

          docker run --rm -ti -v mydata:/c_mydata ubuntu

        now your in container

                 ls -ltr

           cd mydata_c
                ls -ltr

              nothing in this container

            here vi editor isn't work that's way we push like this .

          echo "this is sample data written in container " >/mydata1/sample.txt

               ls -ltr
             cat example.txt
             --> it will show contain

        ctrl +p+q   

                            docker volume ls


                         docker volume inspect mydata 

        mountpoint:/var/lib/docker/volume/mydata/_data

                    cd /var/lib/docker/volume/mydata
                            cd_data 
                  
                    ls -ltr

              example.txt
cat example.txt 

 content will be available here
     same data available in my host machine.
             now iam going to edit this is data at here

                   vi Example.txt
somthing writen in editor

 save it 
                     docker ps 

                   docker exec -it container id bash

now your in container 
                          ls -ltr
                      cd mydata_c
                         ls -ltr
                    cat example.txt
it show s what ever we edit the line so far before it will appeaar here.
ctrl +p+q
                   docker stop container id 

                    docker ps -a 

              it is not inthis it will remove automatically .

persistently mydata is available in my local machine .

          NOTE  :   How to run existing container WITH new container 

   docker run --rm -it -v mydata:/mydata_c2 --name newubuntu1 ubuntu

              cd /mydata_c2/
              ls -ltr
             echo "this is new other container written data">/mydata_c2/govi.txt

                   ctrl + p+q 
 
                  cat example.txt

 what ever we write the data and previous data also avialable in mydata_c2 and also host machines ""mydata""


                         HOW TO INSTALL JENKINS WITH DOCKER IMAGE WITH VOLUME

now your in volme of mydata path like: cd /var/lib/docker/volume/mydata 

     now your in myadta $                  


                                   docker pull jenkins/jenkins


  docker run --restart=always -d -p 8080:8080 -p 50000:50000 -v /jenkins_home:/var/jenkins_home -u root --name jenkins jenkins/jenkins:lts-alpine

                                docker ps -a

         jenkins container in running --> inbound rule --> 8080 >any where   --> save

new tab take the ip :8080
  
                          if incase not running
                        docker logs container id 

because of permission denid 

                cd /jenkins_home/

                 ls -ltr

sudo cat /jenkins_home/secrets/intialAdmin passwd

copy and paste it 

go to jenkins dash board --> run the new job --> build --> Execute shell--> commamnd echo "this is project "

apply and save .

build now .

in  git  bash

                          cd /Jenkins_home/
                              ls -ltr
                               cd workspace

                                   ls -lt

any changes are any plugin are download any jobs build it will be store in your local host machine also 

                                     


                                     DOCKER COMPOSE


Docker compose: is used too run multiple containers at a time .

why because run the individual conatainers at a multiple time's insted of that we are using the "docker compose "

in this "services is required  " 

docker compose  (or) services is required three things .
1 . Dockerfle
2 . docker-compose.yml 
3 . docker-compose up


  First we install  docker compose commands :

sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose


2 .Apply executable permissions to the binary.

sudo chmod +x /usr/local/bin/docker-compose

3. Test the installation.

docker-compose --version

                              mkdir composetest
                               cd composetest
                               
                vi Dockerfile 

FROM python:3.4-alpine
ADD . /code
WORKDIR /code
RUN pip install -r requirements.txt
CMD ["python", "app.py"]



              vi app.py


import time
import redis
from flask import Flask


app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello vardhan! I have been seen {} times.\n'.format(count)
if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True)





          



                         vi requirements.txt

flask
redis


 save it
                                vi docker-compose.yml

version: '3'
services:
  web:
    build: .
    ports:
     - "5000:5000"
  redis:
    image: "redis:alpine"





save it.

                                    docker-compose up

edit inbound rules  --> add 5000 anywhere

copy and past it new tab : Hello world have to come !

let's change the code :

                     vi app.py
insted of hello world : we add Hello vardhan

save it 

refresh the tab it will shows Hello vardhan have to come .


 Another compose file             

                                    mkdir word_press_test
                                    cd word_press_test

                           vi docker-compose.yml
version: '3'

services:
  # Database
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - '8000:80'
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress 
    
                                 docker-compose up -d

                                 docker ps 

                                 docker-compose ps
then go to inbound rules --> add -->8000 --> anywhere --> 

take the public ip :8000   --> it shows the word press







--> Another compose file 

                                  mkdir vardhan
                                   cd vardhan

                           
                            vi docker-compose.yml 

                                   version: '3' 
                                   services: 
                                         web:

                                        image: nginx
                                        port:
                                         -9090:81

                                      database:
                                        image:redis


                        docker-compose config

                       docker-compose up 
                              (or)

                       docker-compose up -d

                      docker-compose ps

edit inbound rules :add 9090 --> anywhere --> save

                  new tab --> public ip :9090

run nginx

reids   default port is --> 6379

                      docker-compose down

                     docker-compose ps

running container are down (or) zero .

                  docker-compose up -d --scale database=4

                     4 data base are running


                                       


                                               HOW TO COMMUNICATE TWO 
                           DOCKER CONTAINERS USING USING DOCKER --LINK WORDPRESS-MYSQL



       --> its just like a docker compose
      
       ---> its docker link communicate two docker containers.



                        docker pull wordpress

                       docker pull mysql

                       docker images 

now run mysql container:


              docker run -d --name mysqlwp -e MYSQL_ROOT_PASSWD=wordpressdocker -d mysql

now run word press container:

               docker run --name wordpress --link mysqlwp:mysql -p 80:80 -d wordpress

                      docker ps 

                  go to launch wizard -- add --80- anywhere 

take the public ip --> paste in new tab 

              have to come word press  --> login to the word press
Dash board --> view of word press


                              DOCKER LOAD BALANCER-NGINIX



Step :1 Create a linux machine
Launch  instance --- amazon linux ---no.of instance -1 ----subnet –souteast-1a    –name tag -webserver-1 -----security group—mysecurity group
Then open the two ports 
1. ssh                        22                 anywere
2. http                      80                anywere

---step important : Advance details –user data
  #!/bin/bash
  sudo su 
  yum update –y
  yum install docker.io
  yum install httpd -y 
  cd /var/www/html
  echo “webserver-1” > index.html
  service httpd start
  chkconfig httpd on



Step :2 Create a linux machine
Launch  instance --- amazon linux ---no.of instance -1 ----subnet –souteast-1a    –name tag -webserver-1 -----security group—mysecurity group
Then open the two ports 
1. ssh                        22                 anywere
2. http                      80                anywere

---step important : Advance details –user data
  #!/bin/bash
  sudo su 
  yum update –y
  yum install docker.io
  yum install httpd -y 
  cd /var/www/html
  echo “webserver-2” > index.html
  service httpd start
  chkconfig httpd on

Step :3 Create a linux machine

Launch  instance --- amazon linux ---no.of instance -1 ----subnet –souteast-1a    –name tag -webserver-1 -----security group—mysecurity group
Then open the two ports 
1. ssh                        22                 anywere
2. http                      80                anywere

                   amazon-linux-extras install nginx1.12


                                 sudo apt install nginx 1.14.0

 

  vi /etc/nginx/nginx.conf 
  
       ESC  + d + G


            events {
              worker_connections 768;
              # multi_accept on;
            }
            http {
              upstream backend {
                 server ec2-13-233-195-248.ap-south-1.compute.amazonaws.com;
                 server ec2-13-233-148-64.ap-south-1.compute.amazonaws.com;
               }
               server {
                 listen 80;
                 location / {
                   proxy_pass http://backend;
                     }
                  }
             }


                 sysytemctl reload nginx
               
                 netstat-nplt | grep -i listen
then go to take the DNS OF : main server then refresh it

                service httpd stop


      
               
             
               HOW TO COMMUNICATE TWO DOCKER CONTAINERS USING DOCKER --LINK _WORDPRESS_MYSQL



---> JUST LIKE DOCKER COMPOSE

--->ITS docker link communicate two docker containers .
   
                 docker pull wordpress

                 docker pull mysql 
             
                  docker images
now run mysql container:

docker run -d --name mysqlwp -e MYSQL_ROOT_PASSWORD=wordpressdocker mysql mysqld --default-authentication-plugin=mysql_native_password

docker run --name wordpress --link mysqlwp:mysql -p 80:80 -d wordpress

docker ps 
go to inbound rules -->80  -> anywhere

take the ip -->paste in new window --

appear the wordpress -->login the wordpress

-->dash board -->view the word press


                                        DOCKER HEALTH CHECK




Take one instance --> coonect it --> git clone https://github.com/ybmadhu/pythonapp.git


ls -ltr
                           mkdir health-test
                          cd health-test

                            ls -ltr
   
                             vi requirements.txt

Flask==0.12.2


save it .

cat requirements.txt


                             vi app.py
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
 return 'Hello world'
if __name__ == '__main__':
   app.run(host='0.0.0.0')

                                       vi Dockerfile

FROM python:3.6-alpine
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
CMD ["python", "app.py"]


                              docker build -t docker-flask .

                        docker run --rm --name docker-flask -p 5000:5000 docker-flask

inbound rules --5000 -any where 


take the ip :5000 

and it will shows hello world 

now how to do health ckeck 

then edit the docker file

                                          vi Dockerfile
FROM python:3.6-alpine
COPY . /app
WORKDIR /app
RUN apk add curl 
RUN pip install -r requirements.txt
HEALTHCHECK CMD curl --fail http://localhost:5000/ || exit 1
CMD ["python", "app.py"]
 


Before  cmd we add above the commands .

                              
                                   docker build -t docker-flask .
                                       docker ps

then stop container ID deleted the previous builds and containers .

                                  docker stop container ids

                                  docker ps -a

                                  docker rm container id


                    docker run -d --rm --name docker-flask -p 5000:5000 docker-flask

                                    docker ps

                      it shows (health:starting)

                    docker inspect --format='{{json .State.Health}}' docker-flask

after 30 seconds curl command will excute,

                    docker inspect --format='{{json .State.Health}}' docker-flask



                      HOW TO INSTALL JFORG USING DOCKER IMAGE.

take the t2.medium



oss --> free .

pro ---> licence based .

                             docker pull jfrogqa/alpine:latest

 
                         docker pull docker.bintray.io/jfrog/artifactory-oss:latest


                         docker pull docker.bintray.io/jfrog/artifactory-pro:latest
inthis we have to run 

                          docker images 

lets run the container 


docker run --name artifactory -d -p 8081:8081 -v /jfrog/artifactory:/var/opt/jfrog/artifactory docker.bintray.io/jfrog/artifactory-oss
                                   

               docker ps 

and allow the port number 8081 anywhere

take the public ip :8081 

jfrog will be run 

user name is    admin 
passwd id       admin123



                                     DOCKER-ONBUILD-TEST

                                     mkdir onbuidtest
                                      cd onbuildtest
                                   
                                        vi Dockerfile
FROM busybox
ONBUILD RUN echo "hi this is vardhan"

                                   
                                   docker build -t hello .

                                      docker images

                                      docker run -it --name msg hello


nothing will run it is the base image for next dockcer file


                           cd

                            change the directory

                                  mkdir onbuildtest-child
                                    cd  onbuildtest-child


                                         vi Dockerfile

FROM hello

save it /.                              
                                       docker build -t hello-child .

                                              ls -ltr
                                          mv Dockerfile Dockerfile
                                               ls -ltr

                                     docker build -t hello-child .


       hi this is vardhan will excute 

                   cd 
                 one more example

                                   mkdir parent-nginx
                                     cd parent-nginx
                            
                                          vi Dockerfile
FROM nginx:1.16-alpine
LABEL Auther="this is vardhan"
WORKDIR /usr/share/nginx/html
ONBUILD COPY index.html .

this is a base image for next dockerfile.

                          docker build -t nginx-parent .

                         docker run -d -p 8181:80 nginx-parent

Allow the 8181 port and 8282 anywhere 
  
take the public ip :8181
 it will shows niginx

cd

                                mkdir child-nginx
                                cd child-nginx

                                  vi Dockerfile

FROM nginx-parent

                            docker build -t nginx-child .

inthis index.html file is not there thats way its faild.

                                        vi index.html
                                  <h1>this is my web page<h1>

save it :

                             docker build -t nginx-child .

                          docker run -d -p 8282:80 nginx-child

take the public ip :8282
 it will shows         this is my web page


                                 DOCKER NETWORKING 

                                      ifconfig

Host machine---> create a container ---> etho 172.17.02 -->veth ---> dockero --> etho192.168.12(host machine)-->host machine acces for the application.



                                docker network ls

                                docker network rm <containerid>

                                  1 . bridge  network
                                  2 . host
                                  3 . none


                             sudo yum install bridge-utils -y

                             sudo apt install bridge-utils -y

                              brctl show

                           docker run -t -i ---name ubuntu1 ubuntu

                                

                              ifconfig 

 veth is created to every container

this container add in to our network 

                                 brctl show docker0

                          docker network inspect bridge

                      docker run -it --name ubuntu2 ubuntu


                             ctrl +p +q

                            docker ps 


                               ifconfig

two veth are ctreated 

these two container comminicate with each other .

                              docker network inspect bridge

two ip address will come here.
172.17.0.3/16
172.17.0.2/16


                                   brctl show docker0

                                 docker ps 
let's login in to one container 


                            docker exec -it container id /bin/bash
now yoyr in a container

then install some packeges.
                           apt-get update && apt install -y iputils-ping && apt install iproute2 -y

                                 ping 172.17.0.2/16

let's create our coustom network
                                       ctrl +p +q

                            docker network ls

                   docker network create mynetwork --subnet=10.0.0.1/16 --gateway=10.0.10.100

                        docker network ls

                           docker inspect mynetwork

there is no container in this network.


                          docker run -it --net mynetwork --name myubuntu3 ubuntu

ctrl +p+q

                     docker inspect mynetwork

container will be join to our network .

now we trying to connect our own network to default network .

                              docker exec -it myubuntu3 /bin/bash

                       apt-get update && apt install -y iputils-ping && apt install iproute2 -y

                               ping 172.17.0.2
its not connetect

                                      docker ps 
                                        ifconfig


                                       brctl show br-3419a620da35

                          docker network connect bridge myubuntu3

                            docker exec -it myubuntu3 /bin/bash

                                                 ping 172.17.0.2
                                                 ping 172.17.0.3




                      docker swarm
			
			1  swarm manager
			2 worker node1
			3 worker node2
			4 worker node3
		docker swarm configaration
		
		docker swarm init --advertise-addr 172.31.33.224(manager private ip)
it will creat ***docker swram join --token SWMTKN-1-1e
(it will apply on worker nodes)

  docker info	

swarm active lo vundali
   
docker node ls

          ***in worker node 1 and node 2   
   docker -v
   
(copy that token) docker swram join --token SWMTKN-1-1e

*******in swarm manager

docker node ls 

it will shows 1 leadr and two nodes

leader indicate with *

then go launch wizard change the inbound rules and apply --->2377


   
		
					  

 
                   


                               









                            






 



