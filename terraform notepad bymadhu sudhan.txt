                                             Terraform 


1. create a iam  Access key ID      :    AKIAWJTYJ6SECYUEMHMM

               Secret access key    :  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

                region              : ap-southeast-2
               
                 need to Adminstration full access.
 
 $ then create a one instance --> login -->   wget https://releases.hashicorp.com/terraform/0.14.5/terraform_0.14.5_linux_amd64.zip

                                       ls -ltr

then unzip this file
                                 unzip  terraform_0.14.5_linux_amd64.zip

                                     sudo mv  terraform /usr/local/bin

                                sudo chown -R root:root /usr/local/bin/terraform

                                            terraform version

                                    mkdir terraform_practicals
                                     cd terraform_practicals/
                                          mkdir base
                                           cd base/
                                           ls -ltr
                                           vi base.tf
provider "aws" {
  access_key = "AKIAWJTYJ6SECYUEMHMM"
  secret_key = "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"
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"
}
~


    
  
                                          terraform plan
                                           
                                          terraform init
                                          
                                           terraform plan
                                        
                                           terraform apply

  instance is created but it doesn't have a keypair, name and   security group etc .


then open the file and the name

                                                 vi base.tf

provider "aws" {
  access_key = "AKIAWJTYJ6SECYUEMHMM"
  secret_key = "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"
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"

tags = {
   Name = "jmsth21"
}
}


                                            terraform plan

                                            terraform apply

refresh the browser name will be added.



then add the key to the instance

                                              ssh-keygen

                  /home/ec2-user/.ssh/id_rsa):  jmsth21t

                                               ls -ltr
                                             cat jmsth21t.pub

copy that public key:

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhZtIRuxJk8zw2vao4VPJvCFFLjCLAnjZtnLTmi9NuKOTKHawLm74KjrJE+VQt81MnJq0VVHCseKWC5n4YC2cUSl0QqXyqJ3wlrswarR+e37pLbJ+Cw16v5DiiWR1x7qcIeDIPvoeh9vbsjhoGMTwzZ4o42cSW3cyPGQQifwKIaEZvN8PKMSmYEsHYXOTk6hfDA6zJaYkAlVKvmJAlTrmN0avdNQ45upWKGV+A59aRCjo7oNlyLf35LpIOVRZVSwqd03fmKPTocJA06xfQe4gLP9hQWyLH39KC1I6tKt+/5+Nmdv0lWCQTp0X+VNGvXDwN0z+6kMcDKHdw+0TkS+zl ubuntu@ip-10-0-0-229



                                              vi base.tf

provider "aws" {
  access_key = "AKIAWJTYJ6SECYUEMHMM"
  secret_key = "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"
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"
key_name = "${aws_key_pair.keypair.key_name}"
tags = {
   Name = "jmsth21"
}
}

resource "aws_key_pair" "keypair" {
  key_name   = "jmsth21t"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhZtIRuxJk8zw2vao4VPJvCFFLjCLAnjZtnLTmi9NuKOTKHawLm74KjrJE+VQt81MnJq0VVHCseKWC5n4YC2cUSl0QqXyqJ3wlrswarR+e37pLbJ+Cw16v5DiiWR1x7qcIeDIPvoeh9vbsjhoGMTwzZ4o42cSW3cyPGQQifwKIaEZvN8PKMSmYEsHYXOTk6hfDA6zJaYkAlVKvmJAlTrmN0avdNQ45upWKGV+A59aRCjo7oNlyLf35LpIOVRZVSwqd03fmKPTocJA06xfQe4gLP9hQWyLH39KC1I6tKt+/5+Nmdv0lWCQTp0X+VNGvXDwN0z+6kMcDKHdw+0TkS+zl ubuntu@ip-10-0-0-229"
}

save the file


                                                  terraform plan

                                                  terraform apply


then add the elastick ip for these instance.

                                         vi base.tf


provider "aws" {
  access_key = "AKIAWJTYJ6SECYUEMHMM"
  secret_key = "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"
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"
key_name = "${aws_key_pair.keypair.key_name}"
tags = {
   Name = "jmsth21"
}
}

resource "aws_key_pair" "keypair" {
  key_name   = "jmsth21t"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhZtIRuxJk8zw2vao4VPJvCFFLjCLAnjZtnLTmi9NuKOTKHawLm74KjrJE+VQt81MnJq0VVHCseKWC5n4YC2cUSl0QqXyqJ3wlrswarR+e37pLbJ+Cw16v5DiiWR1x7qcIeDIPvoeh9vbsjhoGMTwzZ4o42cSW3cyPGQQifwKIaEZvN8PKMSmYEsHYXOTk6hfDA6zJaYkAlVKvmJAlTrmN0avdNQ45upWKGV+A59aRCjo7oNlyLf35LpIOVRZVSwqd03fmKPTocJA06xfQe4gLP9hQWyLH39KC1I6tKt+/5+Nmdv0lWCQTp0X+VNGvXDwN0z+6kMcDKHdw+0TkS+zl ubuntu@ip-10-0-0-229"
}
resource "aws_eip" "myeip" {
  vpc = true
  instance = "${aws_instance.base.id}"
}


save it 
                                                  terraform plan

                                                  terraform apply


then adding the securitygroups for the instance.


                                         vi base.tf

provider "aws" {
  access_key = "AKIAWJTYJ6SECYUEMHMM"
  secret_key = "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"
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"
key_name = "${aws_key_pair.keypair.key_name}"
vpc_security_group_ids = [aws_security_group.allow_ports.id]
tags = {
   Name = "jmsth21"
}
}

resource "aws_key_pair" "keypair" {
  key_name   = "jmsth21t"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhZtIRuxJk8zw2vao4VPJvCFFLjCLAnjZtnLTmi9NuKOTKHawLm74KjrJE+VQt81MnJq0VVHCseKWC5n4YC2cUSl0QqXyqJ3wlrswarR+e37pLbJ+Cw16v5DiiWR1x7qcIeDIPvoeh9vbsjhoGMTwzZ4o42cSW3cyPGQQifwKIaEZvN8PKMSmYEsHYXOTk6hfDA6zJaYkAlVKvmJAlTrmN0avdNQ45upWKGV+A59aRCjo7oNlyLf35LpIOVRZVSwqd03fmKPTocJA06xfQe4gLP9hQWyLH39KC1I6tKt+/5+Nmdv0lWCQTp0X+VNGvXDwN0z+6kMcDKHdw+0TkS+zl ubuntu@ip-10-0-0-229"
}
resource "aws_eip" "myeip" {
  vpc = true
  instance = "${aws_instance.base.id}"
}
resource "aws_default_vpc" "default" {
  tags = {
    Name = "Default VPC"
  }
}
resource "aws_security_group" "allow_ports" {
  name        = "allow_ports1"
  description = "Allow inbound traffic"
  vpc_id      = "${aws_default_vpc.default.id}"
  ingress {
    description = "http from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "tomcat port from VPC"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
}

  ingress {
    description = "TLS from VPC"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_ports1"
  }
}

~
~
~


save it 



then add the user data 


                                                           vi base.tf


provider "aws" {
  access_key = "AKIAWJTYJ6SECYUEMHMM"
  secret_key = "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"
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"
key_name = "${aws_key_pair.keypair.key_name}"
vpc_security_group_ids = [aws_security_group.allow_ports.id]
user_data= <<-EOF
             #!/bin/bash
              apt update
              apt install apache2 -y
              service apache2 restart
EOF
tags = {
   Name = "jmsth21"
}
}

resource "aws_key_pair" "keypair" {
  key_name   = "jmsth21t"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhZtIRuxJk8zw2vao4VPJvCFFLjCLAnjZtnLTmi9NuKOTKHawLm74KjrJE+VQt81MnJq0VVHCseKWC5n4YC2cUSl0QqXyqJ3wlrswarR+e37pLbJ+Cw16v5DiiWR1x7qcIeDIPvoeh9vbsjhoGMTwzZ4o42cSW3cyPGQQifwKIaEZvN8PKMSmYEsHYXOTk6hfDA6zJaYkAlVKvmJAlTrmN0avdNQ45upWKGV+A59aRCjo7oNlyLf35LpIOVRZVSwqd03fmKPTocJA06xfQe4gLP9hQWyLH39KC1I6tKt+/5+Nmdv0lWCQTp0X+VNGvXDwN0z+6kMcDKHdw+0TkS+zl ubuntu@ip-10-0-0-229"
}
resource "aws_eip" "myeip" {
  vpc = true
  instance = "${aws_instance.base.id}"
}
resource "aws_default_vpc" "default" {
  tags = {
    Name = "Default VPC"
  }
}
resource "aws_security_group" "allow_ports" {
  name        = "allow_ports1"
  description = "Allow inbound traffic"
  vpc_id      = "${aws_default_vpc.default.id}"
  ingress {
    description = "http from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "tomcat port from VPC"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
}

  ingress {
    description = "TLS from VPC"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_ports1"
  }
}

                                                   terraform plan

                                                  terraform apply


then going to create s3 bucket 

                                        cd ..
 
                                         mkdir s3
                                           cd s3


                                            before going to this



 we have  create a one file called sample.txt(it is s3 directry)

                                           vi s3.tf

provider "aws" {
region = "ap-southeast-2"
}
resource "aws_s3_bucket" "bucket" {
  bucket = "vardhan9177-sun"
  acl    = "private"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}





                                            terraform plan


                                           terraform init

                                           terraform apply

then add object in s3 bucket

                                            before going to this



 we have  create a one file called sample.txt(it is s3 directry)

                                        vi sample.txt

this is a smple file

save it
                                              vi s3.tf
provider "aws" {
region = "ap-southeast-2"
}
resource "aws_s3_bucket" "bucket" {
  bucket = "vardhan9177-sun"
  acl    = "private"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}

resource "aws_s3_bucket_object" "object" {
  bucket = "vardhan9177-sun"
  key    = "sample.txt"
  source = "/root/terraform_practicals/s3/sample.txt"
}



save it 


                                                        terraform plan


                                                         terraform apply


   txt -- >file wiil be uploaded in your s3 bucket .


     $    now upload to  multiple objects in your s3 bucket


  $  before that you need to craete  one more file called example.txt

                                   vi example.txt

         this is example file

 save it .

                                 vi s3.tf
provider "aws" {
  region = "ap-southeast-2"
}

resource "aws_s3_bucket" "test" {
  acl           = "private"
  bucket = "vardhan9177-mon"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}

resource "aws_s3_bucket_object" "test" {
  for_each = fileset(path.module, "**/*.txt")

  bucket = aws_s3_bucket.test.bucket
  key    = each.value
  source = "${path.module}/${each.value}"
}

output "fileset-results" {
  value = fileset(path.module, "**/*.txt")
}
~

save it .

                terraform plan

                terraform apply


   then add one more file and upload the that in to the s3 bucket.


                                             vi sample2.txt

  this is second sample file 


save it .

                                terraform plan 

                                terraform apply


then it will be added in to the s3 bucket 


   $  then add the index.html file and error.html  insted of previous file .

                                 vi index.html

                       <h1>welcome to my site </h1> 
save it .

                                   vi error.html

                           <h1>site under construction </h1>

sae it.
                    



                                    vi s3.tf
provider "aws" {
  region = "ap-southeast-2"
}

resource "aws_s3_bucket" "test" {
  acl           = "private"
  bucket = "vardhan9177-mon"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}

resource "aws_s3_bucket_object" "test" {
  for_each = fileset(path.module, "**/*.html")

  bucket = aws_s3_bucket.test.bucket
  key    = each.value
  source = "${path.module}/${each.value}"
}

output "fileset-results" {
  value = fileset(path.module, "**/*.html")
}
~


 
                                                terraform plan 


                                                terraform apply

                  $ then enableing the versoning



                                                   vi s3.tf

provider "aws" {
region = "ap-southeast-2"
}
resource "aws_s3_bucket" "bucket" {
  bucket = "vardhan9177-sun"
  acl    = "private"
  versioning {
    enabled = true
  }
  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}

resource "aws_s3_bucket_object" "test" {
  for_each = fileset(path.module, "**/*.html")

  bucket = aws_s3_bucket.test.bucket
  key    = each.value
  source = "${path.module}/${each.value}"
}

output "fileset-results" {
  value = fileset(path.module, "**/*.html")
}
~



                  then static web site hosting for this file then we provide buckets policys


                                               vi s3.tf

provider "aws" {
region = "ap-southeast-2"
}
resource "aws_s3_bucket" "bucket" {
  bucket = "vardhan9177-sun"
  acl    = "public-read"
  website {
    index_document = "index.html"
    error_document = "error.html"
    }
  versioning {
    enabled = true
  }
  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}

resource "aws_s3_bucket_object" "test" {
  for_each = fileset(path.module, "**/*.html")

  bucket = aws_s3_bucket.test.bucket
  key    = each.value
  source = "${path.module}/${each.value}"
}

output "fileset-results" {
  value = fileset(path.module, "**/*.html")
}

resource "aws_s3_bucket_policy" "default" {
  bucket = aws_s3_bucket.bucket.id
  policy = data.aws_iam_policy_document.default.json
}

data "aws_iam_policy_document" "default" {
  statement {
    actions = ["s3:GetObject"]

    resources = ["${aws_s3_bucket.bucket.arn}/*"]

    principals {
      type        = "AWS"
      identifiers = ["*"]
    }
  }
}

                                           terraform plan

                                           terraform apply 





      







                                                



                                               apt install cli

                                                aws --version

                                               aws configure
   
  access_key = AKIAWJTYJ6SECYUEMHMM
  secret_key = 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
  region     = ap-southeast-2
outputformat = table

                                       cat ~/.aws/credentials

                                                ls -ltr

                                       cd terraform_practicals/

                                        cd base/

                                            vi base.tf

provider "aws" {
  region     = "ap-southeast-2"
}
# This is a single-line comment.
resource "aws_instance" "base" {
ami = "ami-0987943c813a8426b"
instance_type = "t2.micro"

tags = {
   Name = "jmsth21"
}
}


                                         terraform apply
                                         terraform destroy







    
